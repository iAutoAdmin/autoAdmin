"""
Django settings for autoadmin project.

Generated by 'django-admin startproject' using Django 2.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import sys

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, BASE_DIR)
sys.path.insert(0, os.path.join(BASE_DIR, "apps"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'sl_59l4=#_1s_j@cb&0aq&wvxf16y7_c9w9woc21@y1ew7#f-='

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'rest_framework',
    'django_filters',
    'rest_framework_swagger',
    'users',
    'groups',
    'servicetree',
    'pms',
    'salt',
    'djcelery',
    'clouds',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'autoadmin.urls'
AUTH_USER_MODEL = "users.User"
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'autoadmin.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'autoadmin',
        'USER': 'root',
        'PASSWORD': 'lixiang123',
        'HOST': '127.0.0.1',
        'PORT': 3306,
        'OPTIONS': {
            'init_command': 'SET default_storage_engine=INNODB;',
        }
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'

REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': ("django_filters.rest_framework.DjangoFilterBackend",),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.AllowAny',
    ),
    # 'DEFAULT_PAGINATION_CLASS': 'autoadmin.paginations.Pagination',
    'PAGE_SIZE': 10
}

LOGIN_URL = 'rest_framework:login'
LOGOUT_URL = 'rest_framework:logout'

ACCCESSKEYID = os.environ.get("ACCCESSKEYID", '')
ACCESSSECRET = os.environ.get("ACCESSSECRET", '')

# salt_api
SALT_URL = 'http://192.168.1.58:8000'
SALT_USER = 'test'
SALT_PASSWORD = 'test1234'

# redis
REDIS_HOST = '127.0.0.1'
REDIS_PORT = 6379
REDIS_PASSWORD = ''

# celery
import djcelery
from celery import platforms
from celery.schedules import crontab
from kombu import Queue
from kombu import Exchange
from datetime import timedelta

platforms.C_FORCE_ROOT = True
djcelery.setup_loader()
BROKER_URL = 'redis://:{}@{}:{}/0'.format(REDIS_PASSWORD, REDIS_HOST, REDIS_PORT)  # redis broker
CELERY_RESULT_BACKEND = 'redis://:{}@{}:{}/1'.format(REDIS_PASSWORD, REDIS_HOST, REDIS_PORT)  # redis backend
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE
CELERY_IMPORTS = (
    'salt.tasks'
)
CELERYD_CONCURRENCY = 4
CELERYD_PREFETCH_MULTIPLIER = 4
CELERYD_MAX_TASKS_PER_CHILD = 40
CELERY_TASK_RESULT_EXPIRES = 86400
CELERYD_TASK_SOFT_TIME_LIMIT = 900
CELERY_ENABLE_UTC = True

CELERY_QUEUES = (
    Queue('low', Exchange('low', type='direct')),
    Queue('high', Exchange('high', type='direct')),
)


class MyRouter(object):
    def route_for_task(self, task, args=None, kwargs=None):

        if task.startswith('deploy'):
            return {
                'queue': 'high',
            }
        else:
            return {'queue': 'low'}


CELERY_ROUTES = (MyRouter(),)

# 定时任务
CELERYBEAT_SCHEDULE = {
    'minion_status_task': {
        'task': 'salt.tasks.minion_status',
        # 'schedule': crontab(minute=u'40', hour=u'17',),
        'schedule': timedelta(minutes=10),
        'args': (),
        'options': {
            'queue': 'low',  # 指定要使用的队列
        }
    }
}
